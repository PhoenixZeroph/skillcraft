SkillCraft — Refactored Core Codebase ✨ v1.4 — License Owner AAndrIng
================================================
All comments, docstrings, and log messages are now in English for consistency.
The module is designed to run **lint‑clean** and compile on the first attempt
(`python -m py_compile`).  It gracefully degrades when optional dependencies
(`ibm-watsonx-ai`, `beeai`, `pandas`) are not present by creating lightweight
stubs that mimic the minimum required API surface, so the development and test
cycle works even in sandboxed or CI environments where those packages cannot
be installed.

Changelog
---------
* **English‑only source** – Spanish text removed or translated.
* **Fixed missing import** – Added `import sys` for test stubbing.
* **Extra safety** – If `pandas` is missing, the cost logger skips writing but
  does not crash.
* **New tests** – Added coverage for `classify_task()` happy‑path and for cost
  logger execution without `pandas`.

To install real dependencies run `pip install -r requirements.txt`.  When the
optional libraries become available, the stubs are automatically bypassed.
"""

# =============================================================================
# requirements.txt (reference only — keep commented so the interpreter ignores)
# =============================================================================
# ibm-watsonx-ai>=0.7.0
# python-dotenv>=1.0.1
# fastapi>=0.110
# uvicorn[standard]>=0.29
# slack_bolt>=1.18
# pandas>=2.2
# requests>=2.31
# beautifulsoup4>=4.12
# click>=8.1
# streamlit>=1.32
# beeai>=0.3.1
# =============================================================================

from __future__ import annotations

import json
import logging
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import Final, List

# ---------------------------------------------------------------------------
# ENVIRONMENT VARIABLES (.env file optional)
# ---------------------------------------------------------------------------
try:
    from dotenv import load_dotenv  # type: ignore

    load_dotenv()
except ModuleNotFoundError:  # pragma: no cover
    logging.info("python‑dotenv not available; .env file ignored")

# =============================================================================
# wx_client.py – Granite client (real or stub) + cost logger
# =============================================================================

_COST_FILE: Final[Path] = Path("costing/cost_sheet.csv")
_COST_FILE.parent.mkdir(parents=True, exist_ok=True)

# ─── Dynamic import with fallback stub ───────────────────────────────────────
try:
    from ibm_watsonx_ai.foundation_models import Model  # type: ignore

    logging.info("ibm‑watsonx‑ai detected ✔️")

    _model: Final["Model"] = Model(
        model_id=os.getenv("WATSON_MODEL", "granite-3-8b-instruct"),
        project_id=os.getenv("PROJECT_ID", "dev-project"),
        api_key=os.getenv("API_KEY", "demo-token"),
        url=os.getenv("WATSON_URL", "https://us-south.ml.cloud.ibm.com"),
    )

    def _extract_usage(resp):  # noqa: D401
        return resp.usage.input_tokens + resp.usage.generated_tokens

except ModuleNotFoundError:  # pragma: no cover – create STUB

    logging.warning("ibm‑watsonx‑ai not found; using local stub 🧪")

    class _StubUsage:  # pylint: disable=too-few-public-methods
        input_tokens = 10
        generated_tokens = 10

    class _StubResponse:  # pylint: disable=too-few-public-methods
        def __init__(self, prompt: str):
            self.generated_text = f"[STUB] {prompt}"
            self.usage = _StubUsage()

    class Model:  # type: ignore
        """Minimal stub replicating the public interface we need."""

        def __init__(self, *_, **__):
            pass

        @staticmethod
        def generate(prompt: str, *_, **__) -> _StubResponse:  # noqa: D401
            return _StubResponse(prompt)

    _model = Model()  # type: ignore

    def _extract_usage(resp):  # noqa: D401
        return 20  # arbitrary token cost for stub accounting


# ─── Cost logger -------------------------------------------------------------

def _log_usage(ru: float, cuh: float = 0.0) -> None:
    """Append a cost row to the CSV cost sheet (if pandas is available)."""

    try:
        import pandas as pd  # type: ignore
    except ModuleNotFoundError:  # pragma: no cover
        logging.warning("pandas not installed; cost logging skipped")
        return

    row = pd.DataFrame(
        [[datetime.utcnow().isoformat(timespec="seconds"), ru, cuh]],
        columns=["timestamp", "ru", "cuh"],
    )
    row.to_csv(_COST_FILE, mode="a", header=not _COST_FILE.exists(), index=False)


def complete(prompt: str, *, max_tokens: int = 256, temperature: float = 0.2) -> str:
    """Granite wrapper (real or stub) with cost logging."""

    resp = _model.generate(  # type: ignore[attr-defined]
        prompt, max_new_tokens=max_tokens, temperature=temperature, return_usage=True
    )
    ru = _extract_usage(resp) / 1_000  # 1 RU = 1k tokens
    _log_usage(ru)
    return resp.generated_text  # type: ignore[attr-defined]


# =============================================================================
# agents.py – BeeAI (with stub) + helper tools
# =============================================================================

try:
    from beeai.agents.react import ReActAgent  # type: ignore

    logging.info("BeeAI detected ✔️")
except ModuleNotFoundError:  # pragma: no cover

    logging.warning("BeeAI not found; using agent stub 🧪")

    class ReActAgent:  # type: ignore
        """Very small stub that just calls the first provided tool."""

        def __init__(self, tools: List):
            self._tools = tools

        def __call__(self, prompt: str):  # noqa: D401, ANN001
            return self._tools[0](prompt)


def _tool(prompt: str, *, system: str, max_tokens: int = 128) -> str:
    """Internal helper to compose system + user prompt."""

    return complete(f"{system}\n---\n{prompt}", max_tokens=max_tokens)


def classify_task(task: str) -> str:
    """Summarise the boring task in <30 words."""

    return _tool(task, system="You are a productivity expert. Summarise the task in <30 words.", max_tokens=64)


def generate_plan(task: str) -> str:
    """Generate a bullet plan (<8) to automate the task."""

    return _tool(task, system="You are a Senior DevOps engineer. Deliver a bullet plan (<8) to automate the task.")


def suggest_courses(topic: str) -> str:
    """Suggest three courses for micro‑upskilling."""

    return _tool(topic, system="Recommend 3 courses (Title – Platform – Duration).", max_tokens=96)


router = ReActAgent(tools=[classify_task, generate_plan, suggest_courses])  # type: ignore[misc]


def handle_message(message: str) -> str:
    """Entry point for Slack/app mentions."""

    return router(message)

# =============================================================================
# (Other modules such as api.py, scrape.py, dashboard, etc. remain unchanged.)
# =============================================================================

# =============================================================================
# tests – run with `pytest -q`
# =============================================================================

if "PYTEST_CURRENT_TEST" in os.environ:

    import pytest  # type: ignore

    def test_stub_model_returns_text(monkeypatch):
        """Force stub mode and verify it responds with a stub prefix."""

        monkeypatch.setitem(sys.modules, "ibm_watsonx_ai.foundation_models", None)
        from importlib import reload  # noqa: WPS433 – needed for reload

        mod = reload(sys.modules[__name__])
        assert "[STUB]" in mod.complete("hello stub")

    def test_classify_task():
        """`classify_task` should always return non‑empty string."""

        summary = classify_task("Move Jira ticket to Done column")
        assert isinstance(summary, str) and summary.strip()

    def test_cost_logger_without_pandas(monkeypatch):
        """Cost logger should not crash when pandas is missing."""

        monkeypatch.setitem(sys.modules, "pandas", None)
        _log_usage(0.01)  # should just warn and not raise
